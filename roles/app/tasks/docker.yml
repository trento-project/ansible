# code: language=ansible
---
- name: Include Docker installation variables
  ansible.builtin.include_vars: "../defaults/docker.yml"

- name: Install docker
  community.general.zypper:
    name: docker
    state: present
    update_cache: true

- name: Start docker service
  ansible.builtin.service:
    name: docker
    state: started
    enabled: true

- name: Install docker python management deps
  community.general.zypper:
    name:
      - "{{ current_python_package_prefix }}-docker"
    state: present

- name: Force pull trento images
  when: force_pull_images == 'true'
  loop:
    - "{{ wanda_container_image }}"
    - "{{ web_container_image }}"
    - "{{ checks_container_image }}"
  community.docker.docker_image:
    name: "{{ item }}"
    force_source: true
    source: pull

- name: Create trento docker network
  community.docker.docker_network:
    name: "{{ docker_network_name }}"

- name: Checks container
  community.docker.docker_container:
    name: "{{ checks_container_name }}"
    image: "{{ checks_container_image }}"
    recreate: "{{ force_recreate_checks_container == 'true' }}"
    pull: true
    volumes:
      - "/usr/share/trento/checks"

- name: Wanda container
  community.docker.docker_container:
    name: "{{ wanda_container_name }}"
    state: started
    restart_policy: unless-stopped
    recreate: "{{ force_recreate_wanda_container == 'true' }}"
    networks:
      - name: "{{ docker_network_name }}"
    image: "{{ wanda_container_image }}"
    pull: true
    entrypoint:
      [
        "/bin/sh",
        "-c",
        '/app/bin/wanda eval "Wanda.Release.init()" && /app/bin/wanda start',
      ]
    etc_hosts:
      host.docker.internal: "host-gateway"
    ports:
      - "{{ wanda_listen_port }}:4000"
    env:
      CORS_ORIGIN: "http://localhost" # TODO: Remove placeholder
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      ACCESS_TOKEN_ENC_SECRET: "{{ access_token_secret }}"
      AMQP_URL: "{{ amqp_protocol }}://{{ rabbitmq_username }}:{{ rabbitmq_password }}@{{ rabbitmq_host }}/{{ rabbitmq_vhost | urlencode | replace('/', '%2F') }}"
      DATABASE_URL: "ecto://{{ wanda_postgres_user }}:{{ wanda_postgres_password }}@{{ wanda_postgres_host }}/{{ wanda_postgres_db }}"
    volumes_from:
      - "{{ checks_container_name }}:ro"

- name: Web container
  community.docker.docker_container:
    name: "{{ web_container_name }}"
    state: started
    recreate: "{{ force_recreate_web_container == 'true' }}"
    restart_policy: unless-stopped
    image: "{{ web_container_image }}"
    pull: true
    networks:
      - name: "{{ docker_network_name }}"
    entrypoint:
      [
        "/bin/sh",
        "-c",
        '/app/bin/trento eval "Trento.Release.init()" && /app/bin/trento start',
      ]
    etc_hosts:
      host.docker.internal: "host-gateway"
    ports:
      - "{{ web_listen_port }}:4000"
    env:
      AMQP_URL: "{{ amqp_protocol }}://{{ rabbitmq_username }}:{{ rabbitmq_password }}@{{ rabbitmq_host }}/{{ rabbitmq_vhost | urlencode | replace('/', '%2F') }}"
      DATABASE_URL: "ecto://{{ web_postgres_user }}:{{ web_postgres_password }}@{{ web_postgres_host }}/{{ web_postgres_db }}"
      EVENTSTORE_URL: "ecto://{{ web_postgres_user }}:{{ web_postgres_password }}@{{ web_postgres_host }}/{{ web_postgres_event_store }}"
      ENABLE_ALERTING: "{{ omit if enable_alerting is none else (enable_alerting | string | lower) }}"
      SMTP_SERVER: "{{ omit if smtp_server is none else smtp_server }}"
      SMTP_PORT: "{{ omit if smtp_port is none else (smtp_port | string) }}"
      SMTP_USER: "{{ omit if smtp_user is none else smtp_user }}"
      SMTP_PASSWORD: "{{ omit if smtp_password is none else smtp_password }}"
      ALERT_SENDER: "{{ omit if alert_sender is none else alert_sender }}"
      ALERT_RECIPIENT: "{{ omit if alert_recipient is none else alert_recipient }}"
      PROMETHEUS_URL: "{{ prometheus_url }}"
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      ACCESS_TOKEN_ENC_SECRET: "{{ access_token_secret }}"
      REFRESH_TOKEN_ENC_SECRET: "{{ refresh_token_secret }}"
      ADMIN_USER: "{{ web_admin_username }}"
      ADMIN_PASSWORD: "{{ web_admin_password }}"
      ENABLE_API_KEY: "{{ enable_api_key }}"
      CHARTS_ENABLED: "{{ enable_charts }}"
      TRENTO_WEB_ORIGIN: "{{ trento_server_name }}"
      ENABLE_OIDC: "{{ enable_oidc }}"
      OIDC_CLIENT_ID: "{{ oidc_client_id }}"
      OIDC_CLIENT_SECRET: "{{ oidc_client_secret }}"
      OIDC_BASE_URL: "{{ oidc_server_base_url }}"
      ENABLE_OAUTH2: "{{ enable_oauth2 }}"
      OAUTH2_CLIENT_ID: "{{ oauth2_client_id }}"
      OAUTH2_CLIENT_SECRET: "{{ oauth2_client_secret }}"
      OAUTH2_BASE_URL: "{{ oauth2_server_base_url }}"
      OAUTH2_AUTHORIZE_URL: "{{ oauth2_authorize_url }}"
      OAUTH2_TOKEN_URL: "{{ oauth2_token_url }}"
      OAUTH2_USER_URL: "{{ oauth2_user_url }}"
      OAUTH2_SCOPES: "{{ oauth2_scopes }}"
      ENABLE_SAML: "{{ enable_saml }}"
      SAML_IDP_ID: "{{ saml_idp_id }}"
      SAML_IDP_NAMEID_FORMAT: "{{ saml_idp_nameid_format }}"
      SAML_SP_DIR: "{{ saml_sp_dir }}"
      SAML_SP_ID: "{{ saml_sp_id }}"
      SAML_SP_ENTITY_ID: "{{ saml_sp_entity_id }}"
      SAML_SP_CONTACT_NAME: "{{ saml_sp_contact_name }}"
      SAML_SP_CONTACT_EMAIL: "{{ saml_sp_contact_email }}"
      SAML_SP_ORG_NAME: "{{ saml_sp_org_name }}"
      SAML_SP_ORG_DISPLAYNAME: "{{ saml_sp_org_displayname }}"
      SAML_SP_ORG_URL: "{{ saml_sp_org_url }}"
      SAML_USERNAME_ATTR_NAME: "{{ saml_username_attr_name }}"
      SAML_EMAIL_ATTR_NAME: "{{ saml_email_attr_name }}"
      SAML_FIRSTNAME_ATTR_NAME: "{{ saml_firstname_attr_name }}"
      SAML_LASTNAME_ATTR_NAME: "{{ saml_lastname_attr_name }}"
      SAML_METADATA_URL: "{{ saml_metadata_url }}"
      SAML_METADATA_CONTENT: "{{ saml_metadata_content }}"
      SAML_SIGN_REQUESTS: "{{ saml_sign_requests }}"
      SAML_SIGN_METADATA: "{{ saml_sign_metadata }}"
      SAML_SIGNED_ASSERTION: "{{ saml_signed_assertion }}"
      SAML_SIGNED_ENVELOPES: "{{ saml_signed_envelopes }}"
